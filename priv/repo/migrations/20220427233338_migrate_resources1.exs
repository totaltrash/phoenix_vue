defmodule MyApp.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_token, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :token, :binary
      add :context, :text
      add :sent_to, :text
      add :created_date, :utc_datetime_usec, null: false, default: fragment("now()")
      add :user_id, :uuid, null: false
    end

    create table(:user, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:user_token) do
      modify :user_id,
             references(:user, column: :id, name: "user_token_user_id_fkey", type: :uuid)
    end

    create unique_index(:user_token, [:context, :token], name: "user_token_token_context_index")

    alter table(:user) do
      add :username, :citext, null: false
      add :email, :citext, null: false
      add :first_name, :text, null: false
      add :surname, :text, null: false
      add :roles, {:array, :text}, null: false, default: []
      add :confirmed_at, :utc_datetime_usec
      add :hashed_password, :text
      add :created_date, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_date, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:user, [:email], name: "user_unique_email_index")

    create unique_index(:user, [:username], name: "user_unique_username_index")
  end

  def down do
    drop_if_exists unique_index(:user, [:username], name: "user_unique_username_index")

    drop_if_exists unique_index(:user, [:email], name: "user_unique_email_index")

    alter table(:user) do
      remove :updated_date
      remove :created_date
      remove :hashed_password
      remove :confirmed_at
      remove :roles
      remove :surname
      remove :first_name
      remove :email
      remove :username
    end

    drop_if_exists unique_index(:user_token, [:context, :token],
                     name: "user_token_token_context_index"
                   )

    drop constraint(:user_token, "user_token_user_id_fkey")

    alter table(:user_token) do
      modify :user_id, :uuid
    end

    drop table(:user)

    drop table(:user_token)
  end
end